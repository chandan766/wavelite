const FORM_URL="https://docs.google.com/forms/u/0/d/e/1FAIpQLSej8F-WqVXrneoK1caUwagNb8EbcsLG7c2IWbgzlGIxd7xYAQ/formResponse",SHEET_URL="https://docs.google.com/spreadsheets/d/1oQ7TEJLutMpXo4gi75jTOmlBGPBHlF3ekE0mtA3nK_M/gviz/tq?tqx=out:json",DELETE_URL="https://script.google.com/macros/s/AKfycbyNUCRo3JKNk_bVq9VcdpbICGuBiTytBGRAjFr7VDrHVvG6TMxaA195sBSSBOeiR1DG/exec";let localConnection,dataChannel,pollingInterval,isManuallyConnecting=!1,peerId=null;const CONNECTION_TIMEOUT=4e4,CHUNK_TIMEOUT=15e3,MAX_RETRIES=3,CHUNK_SIZE=65536,BUFFER_THRESHOLD=262144;let fileReader=new FileReader,currentFile=null,currentChunk=0,totalChunks=0,retryCounts=new Map,activeTransfers=new Map,receivedFileInfo=null;async function startConnection(e){console.log(`Starting connection for peerId: ${e}`);let t=await fetchSDP(e,"offer");t?(console.log("Offer found, acting as answerer"),await setupAnswerer(t)):(console.log("No offer found, acting as offerer"),await setupOfferer(e))}async function setupOfferer(e){dataChannel=(localConnection=createPeerConnection()).createDataChannel("chat"),setupDataChannel(),$("#peerIdSubmit").text("Offer Creating...");try{let t=await localConnection.createOffer();await localConnection.setLocalDescription(t),await waitForIceGathering(localConnection),console.log(`Submitting offer SDP for peerId: ${e}`),await submitSDP(e,"offer",JSON.stringify(localConnection.localDescription)),$("#peerIdSubmit").text("Waiting for peer...");let n=Date.now();pollingInterval=setInterval(async()=>{if(Date.now()-n>4e4){clearInterval(pollingInterval),$("#peerIdSubmit").prop("disabled",!1).text("Connect"),$("#joinPeer").prop("disabled",!1).text("Join"),alert("Connection timed out. Please try again or check peer ID.");return}let t=await fetchSDP(e,"answer");t&&(console.log(`Answer SDP found for peerId: ${e}`),clearInterval(pollingInterval),await localConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(t.sdp))))},5e3)}catch(r){console.error("Error setting up offerer:",r),$("#peerIdSubmit").prop("disabled",!1).text("Connect"),$("#joinPeer").prop("disabled",!1).text("Join"),alert("Failed to establish connection. Please try again.")}}async function setupAnswerer(e){(localConnection=createPeerConnection()).ondatachannel=e=>{dataChannel=e.channel,setupDataChannel()};try{await localConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(e.sdp)));let t=await localConnection.createAnswer();await localConnection.setLocalDescription(t),await waitForIceGathering(localConnection),console.log(`Submitting answer SDP for peerId: ${e.peerId}`),await submitSDP(e.peerId,"answer",JSON.stringify(localConnection.localDescription))}catch(n){console.error("Error setting up answerer:",n),$("#peerIdSubmit").prop("disabled",!1).text("Connect"),$("#joinPeer").prop("disabled",!1).text("Join"),alert("Failed to establish connection. Please try again.")}}function createPeerConnection(){let e=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},],iceCandidatePoolSize:0});return e.oniceconnectionstatechange=()=>{console.log("ICE connection state:",e.iceConnectionState)},e}function waitForIceGathering(e){return $("#peerIdSubmit").text("ICE Gathering..."),new Promise(t=>{if("complete"===e.iceGatheringState)return t();let n=()=>{"complete"===e.iceGatheringState&&(e.removeEventListener("icegatheringstatechange",n),t())};e.addEventListener("icegatheringstatechange",n)})}async function submitSDP(e,t,n){$("#peerIdSubmit").text("Submitting Offer...");let r=new FormData;r.append("entry.1244760702",e),r.append("entry.443244439",t),r.append("entry.479288741",n);try{await fetch("https://docs.google.com/forms/u/0/d/e/1FAIpQLSej8F-WqVXrneoK1caUwagNb8EbcsLG7c2IWbgzlGIxd7xYAQ/formResponse",{method:"POST",mode:"no-cors",body:r}),console.log(`Submitted ${t} SDP for peerId: ${e}`),$("#peerIdSubmit").text("Offer Submitted")}catch(i){throw console.error(`Error submitting ${t} SDP:`,i),i}}async function fetchSDP(e,t){try{let n=await fetch("https://docs.google.com/spreadsheets/d/1oQ7TEJLutMpXo4gi75jTOmlBGPBHlF3ekE0mtA3nK_M/gviz/tq?tqx=out:json"),r=await n.text(),i=JSON.parse(r.substring(47).slice(0,-2)),a=i.table.rows;for(let o of a){let s=o.c[1]?.v,l=o.c[2]?.v,d=o.c[3]?.v;if(s==e&&l==t&&d)return console.log(`Found ${t} SDP for peerId: ${s}`),{peerId:s,role:l,sdp:d}}return console.log(`No ${t} SDP found for peerId: ${e}`),null}catch(c){return console.error(`Failed to fetch ${t} SDP for peerId: ${e}:`,c),null}}function setupDataChannel(){let e=[],t=null,n=null,r=0;if(!peerId){console.error("peerId is undefined in setupDataChannel");return}dataChannel.onopen=()=>{console.log("Data channel opened for peerId:",peerId),deletePeerFromSheet(peerId),transitionToChat()},dataChannel.onmessage=i=>{if(i.data instanceof ArrayBuffer){if(receivedFileInfo){e.push(i.data),t=Date.now(),r++;let a=e.reduce((e,t)=>e+t.byteLength,0);if(console.log(`Received file chunk ${e.length}/${Math.ceil(receivedFileInfo.fileSize/65536)} for ${receivedFileInfo.fileName}, total bytes: ${a}, expected: ${receivedFileInfo.fileSize}`),updateProgressBar(receivedFileInfo.messageId,a/receivedFileInfo.fileSize*100),a>=receivedFileInfo.fileSize){console.log(`All chunks received for ${receivedFileInfo.fileName}, reconstructing file`),clearTimeout(n);try{let o=new Blob(e,{type:receivedFileInfo.fileType||"application/octet-stream"}),s=URL.createObjectURL(o);displayMessage(receivedFileInfo.name,receivedFileInfo.fileName,!1,"file",s,receivedFileInfo.messageId,"delivered",receivedFileInfo.fileType),hideProgressBar(receivedFileInfo.messageId),e=[],receivedFileInfo=null,r=0,retryCounts.delete(receivedFileInfo?.messageId)}catch(l){console.error(`Error reconstructing file ${receivedFileInfo.fileName}:`,l),hideProgressBar(receivedFileInfo.messageId),alert("Failed to reconstruct received file. Please try again."),e=[],receivedFileInfo=null,r=0,retryCounts.delete(receivedFileInfo?.messageId)}}else clearTimeout(n),n=setTimeout(()=>{if(receivedFileInfo&&a<receivedFileInfo.fileSize){let n=retryCounts.get(receivedFileInfo.messageId)||0;n<3?(console.log(`Requesting resend for ${receivedFileInfo.fileName}, received: ${a}, expected: ${receivedFileInfo.fileSize}, chunk: ${r}`),retryCounts.set(receivedFileInfo.messageId,n+1),dataChannel.send(JSON.stringify({type:"resend_request",messageId:receivedFileInfo.messageId,chunkIndex:r})),t=Date.now()):(console.error(`Max retries reached for ${receivedFileInfo.fileName}, received: ${a}, expected: ${receivedFileInfo.fileSize}`),hideProgressBar(receivedFileInfo.messageId),alert(`Failed to receive all chunks for ${receivedFileInfo.fileName} after 3 retries. Please try again.`),e=[],receivedFileInfo=null,r=0,retryCounts.delete(receivedFileInfo.messageId))}},15e3)}}else{let d=JSON.parse(i.data);"text"===d.type?displayMessage(d.name,d.message,!1,"text",null,d.messageId,"delivered"):"file"===d.type?(receivedFileInfo={name:d.name,messageId:d.messageId,fileName:d.fileName,fileSize:d.fileSize,fileType:d.fileType},e=[],t=Date.now(),r=0,console.log(`Received file metadata for ${d.fileName}, size: ${d.fileSize}, type: ${d.fileType}`),showProgressBar(d.messageId,!1)):"resend_request"===d.type&&(console.log(`Received resend request for messageId: ${d.messageId}, chunk: ${d.chunkIndex}`),resendFileChunk(d.messageId,d.chunkIndex))}},dataChannel.onerror=t=>{console.error("Data channel error:",t),receivedFileInfo?(hideProgressBar(receivedFileInfo.messageId),alert(`Data channel error during transfer of ${receivedFileInfo.fileName}. Please reconnect and try again.`),e=[],receivedFileInfo=null,r=0,clearTimeout(n),retryCounts.delete(receivedFileInfo.messageId)):alert("Data channel error occurred. Please reconnect and try again.")}}function sendFileChunks(e){let t=activeTransfers.get(e);if(!t||65536*currentChunk>=t.fileSize){console.log("File sending completed for messageId:",e),$("#media-input").val(""),document.getElementById("media-input").value="",currentFile=null,currentChunk=0,totalChunks=0,hideProgressBar(e),activeTransfers.delete(e),retryCounts.delete(e);return}if(dataChannel.bufferedAmount>262144){console.log(`Buffer full (${dataChannel.bufferedAmount} bytes), waiting for messageId: ${e}`),setTimeout(()=>sendFileChunks(e),200);return}let n=65536*currentChunk,r=Math.min(n+65536,t.fileSize);fileReader.onload=()=>{try{dataChannel.send(fileReader.result),console.log(`Sent file chunk ${currentChunk+1}/${t.totalChunks} for messageId: ${e}`),currentChunk++,updateProgressBar(e,currentChunk/t.totalChunks*100),setTimeout(()=>sendFileChunks(e),10)}catch(n){throw console.error("Error sending file chunk for messageId:",e,n),hideProgressBar(e),activeTransfers.delete(e),alert("Failed to send file chunk. Please try again."),retryCounts.delete(e),n}},fileReader.onerror=()=>{console.error("FileReader error for messageId:",e),hideProgressBar(e),activeTransfers.delete(e),alert("Failed to read file chunk. Please try again."),retryCounts.delete(e)};let i=t.file.slice(n,r);fileReader.readAsArrayBuffer(i)}function resendFileChunk(e,t){let n=activeTransfers.get(e);if(!n||65536*t>=n.fileSize){console.warn(`Cannot resend chunk ${t} for messageId ${e}: File or chunk out of range`);return}if(dataChannel.bufferedAmount>262144){console.log(`Buffer full during resend (${dataChannel.bufferedAmount} bytes), retrying for messageId: ${e}`),setTimeout(()=>resendFileChunk(e,t),200);return}let r=65536*t,i=Math.min(r+65536,n.fileSize);fileReader.onload=()=>{try{dataChannel.send(fileReader.result),console.log(`Resent file chunk ${t+1}/${n.totalChunks} for messageId ${e}`)}catch(r){console.error(`Error resending file chunk ${t} for messageId ${e}:`,r)}},fileReader.onerror=()=>{console.error(`FileReader error during resend for messageId: ${e}`)};let a=n.file.slice(r,i);fileReader.readAsArrayBuffer(a)}function showProgressBar(e,t){let n=t?activeTransfers.get(e)?.fileName||"Unknown File":receivedFileInfo?.fileName||"Unknown File";$("#chat-display").append(`
    <div class="chat-message ${t?"self":"other"} px-3" id="progress-${e}">
      <div class="file-name mt-2" style="font-size: 14px; font-weight: 500;">${n}</div>
      <div class="progress mt-2" style="height: 30px;">
        <div class="progress-bar progress-bar-striped progress-bar-animated bg-info" 
             role="progressbar" 
             style="width: 0%; font-size: 16px; line-height: 30px;" 
             aria-valuenow="0" 
             aria-valuemin="0" 
             aria-valuemax="100">
             <span class="progress-percentage">0%</span>
        </div>
      </div>
    </div>
  `),$("#chat-display").scrollTop($("#chat-display")[0].scrollHeight)}function updateProgressBar(e,t){let n=Math.min(100,Math.round(t));$(`#progress-${e} .progress-bar`).css("width",`${n}%`).attr("aria-valuenow",n).find(".progress-percentage").text(`${n}%`)}function hideProgressBar(e){$(`#progress-${e}`).remove()}function transitionToChat(){$("#chat-section").hasClass("d-none")&&($("#login-section").removeClass("d-flex").addClass("d-none"),$("#chat-section").removeClass("d-none"),$("#peerIdSubmit").prop("disabled",!1).text("Disconnect"),console.log("Transitioned to chat UI"))}function displayMessage(e,t,n,r,i,a,o,s=null){let l=new Date().toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"}),d=t;if("file"===r&&i){let c=s&&s.startsWith("image/"),f=s&&s.startsWith("audio/"),u=s&&s.startsWith("video/"),p=`<a href="${i}" download="${t}" class="btn btn-sm btn-secondary ms-1"><i class="fas fa-download"></i></a>`,g=`<div class="file-name" style="font-size: 13px; font-weight: 500;">${t}</div>`;d=c?`
      <div class="image-wrapper" style="max-width: 100%; overflow: hidden;">
        <img src="${i}" alt="${t}" class="img-fluid rounded mt-2" style="width: 100%; height: auto; object-fit: contain;" />
      </div>
      <br>${g} ${p}`:f?`<audio controls src="${i}" class="mt-2" style="width: 100%; max-width: 300px;"></audio><br>${g} ${p}`:u?`<video controls src="${i}" class="mt-2" style="max-width: 300px; max-height: 250px; object-fit: contain;" class="img-fluid rounded"></video><br>${g} ${p}`:`${g}${p}`}try{$("#chat-display").append(`
      <div class="chat-message ${n?"self":"other"} px-3">
        <div class="message py-1" style="font-size:12px;font-weight:450;">${d}</div>
        <div class="message-meta d-flex justify-content-end border-top border-secondary mt-2">
          <span class="timestamp text-end" style="font-size:10px;">${n?"":`<span class="name" style="font-size:12px;">${e}</span>`} ${l} ${n?'<span class="status-icon text-muted ms-2"><i class="fas fa-check-double"></i></span>':""}</span>
        </div>
      </div>
    `),$("#chat-display").scrollTop($("#chat-display")[0].scrollHeight),console.log(`Displayed message for ${r}: ${t}, fileType: ${s||"none"}`)}catch(m){console.error(`Error displaying message for ${t}:`,m),alert("Failed to display message in UI. Please refresh the page.")}}function deletePeerFromSheet(e){if(!e){console.error("peerId is undefined in deletePeerFromSheet");return}fetch(DELETE_URL,{method:"POST",body:new URLSearchParams({peerId:e})}).then(e=>e.text()).then(t=>console.log("Deleted SDP for peerId:",e,t)).catch(t=>console.error("Delete error for peerId:",e,t))}async function startJoinConnection(e){console.log(`Starting join connection for peerId: ${e}`),$("#joinPeer").text("Waiting for offer...");let t=Date.now();pollingInterval=setInterval(async()=>{if(Date.now()-t>4e4){clearInterval(pollingInterval),$("#joinPeer").prop("disabled",!1).text("Join"),$("#peerIdSubmit").prop("disabled",!1).text("Connect"),alert("No offer found. Please try again or check peer ID.");return}let n=await fetchSDP(e,"offer");if(n){console.log(`Offer SDP found for peerId: ${e}, proceeding as answerer`),clearInterval(pollingInterval);try{await setupAnswerer(n),$("#joinPeer").text("Connected")}catch(r){console.error("Error during join connection:",r),$("#joinPeer").prop("disabled",!1).text("Join"),$("#peerIdSubmit").prop("disabled",!1).text("Connect"),alert("Failed to join connection. Please try again.")}}else console.log(`No offer SDP found yet for peerId: ${e}`)},3e3)}$(document).ready(()=>{$("#peerIdSubmit").click(async function(e){e.preventDefault(),isManuallyConnecting=!0;var t=$("#chat-username").val().trim();peerId=$("#peer-id").val().trim(),$("#name-error").text(""),$("#peer-error").text(""),t||(t="Anonymous"),peerId||(peerId="peer123"),$("#peerIdSubmit").prop("disabled",!0).text("Connecting..."),$("#joinPeer").prop("disabled",!0).text("Join"),$("#peerId").val(peerId),startConnection(peerId)}),$("#media-input").change(e=>{let t=e.target.files[0];currentFile=t||null}),$("#btn-send-media").click(()=>{if(currentFile){if(dataChannel&&"open"===dataChannel.readyState){console.log("Sending file, dataChannel state:",dataChannel.readyState);let e=$("#chat-username").val()||"Anonymous",t=Date.now().toString();currentChunk=0,totalChunks=Math.ceil(currentFile.size/65536),activeTransfers.set(t,{file:currentFile,fileName:currentFile.name,fileSize:currentFile.size,fileType:currentFile.type||"application/octet-stream",totalChunks});let n={type:"file",name:e,messageId:t,fileName:currentFile.name,fileSize:currentFile.size,fileType:currentFile.type||"application/octet-stream"};try{dataChannel.send(JSON.stringify(n));let r=URL.createObjectURL(currentFile);displayMessage(e,currentFile.name,!0,"file",r,t,"sent",n.fileType),showProgressBar(t,!0),sendFileChunks(t)}catch(i){console.error("Error sending file:",i),hideProgressBar(t),activeTransfers.delete(t),alert("Failed to send file. Please try again.")}}else console.warn("Cannot send file, dataChannel state:",dataChannel?dataChannel.readyState:"undefined"),alert("Please wait until the connection is established before sending a file.")}else $("#media-input").click()}),$("#btn-send-text").click(()=>{let e=$("#chat-username").val()||"Anonymous",t=$("#chat-message").val(),n=Date.now().toString();if(t&&dataChannel&&"open"===dataChannel.readyState){console.log("Sending text message, dataChannel state:",dataChannel.readyState);try{dataChannel.send(JSON.stringify({type:"text",name:e,message:t,messageId:n})),displayMessage(e,t,!0,"text",null,n,"sent"),$("#chat-message").val("")}catch(r){console.error("Error sending text message:",r),alert("Failed to send message. Please try again.")}}else console.warn("Cannot send text, dataChannel state:",dataChannel?dataChannel.readyState:"undefined"),alert("Please wait until the connection is established before sending a message.")}),$("#delete-all-btn").click(()=>{fetch(DELETE_URL,{method:"POST",body:new URLSearchParams({peerId:""})}).then(e=>e.text()).then(e=>alert("Deleted all SDP entries:",e)).catch(e=>alert("Error deleting SDP entries:",e))}),$("#joinPeer").click(async function(e){e.preventDefault(),isManuallyConnecting=!0;let t=$("#chat-username").val().trim();peerId=$("#peer-id").val().trim(),$("#name-error").text(""),$("#peer-error").text("");let n=!1;t||($("#name-error").text("Name is required"),n=!0),peerId||($("#peer-error").text("Peer ID is required"),n=!0),!n&&($("#joinPeer").prop("disabled",!0).text("Joining..."),$("#peerIdSubmit").prop("disabled",!0).text("Connect"),$("#peerId").val(peerId),startJoinConnection(peerId))}),$("#confirmSavePeerBtn").click(async()=>{let e=$("#peerIdToSave").val().trim(),t=$("#peerNameToSave").val().trim(),n=$("#save-peer-alert");if(n.addClass("d-none").text(""),!e||!t){n.text("Peer ID or Name cannot be empty").removeClass("d-none");return}let r=await Notification.requestPermission();if("granted"!==r){n.text("Notification permission denied. Cannot save Peer ID.").removeClass("d-none");return}localStorage.setItem("peerIds",e),localStorage.setItem("peerName",t),alert(`Peer ID "${e}" saved for notifications.`),$("#savePeerModal").modal("hide")}),$("#settingBtn").click(function(){let e=localStorage.getItem("peerIds")||"",t=localStorage.getItem("peerName")||"";e&&($("#peerIdToSave").val(e),$("#peerNameToSave").val(t))});let e=!1;setInterval(async()=>{if(isManuallyConnecting||e)return;let t=localStorage.getItem("peerIds")||"peer123",n=localStorage.getItem("peerName")||"Anonymous";if(!t)return;let r=await fetchSDP(t,"offer");if(r){if("granted"===Notification.permission&&"visible"!==document.visibilityState){let i=new Notification("Wavelite",{body:`Peer "${t}" is requesting to connect.`,icon:"/logo.png"});i.onclick=function(e){e.preventDefault(),window.focus(),$("#autoJoinMessage").text(`Peer "${t}" is requesting to connect. Do you want to join?`);let r=new bootstrap.Modal(document.getElementById("autoJoinModal"));r.show(),$("#autoJoinConfirmBtn").off("click").on("click",()=>{r.hide(),setTimeout(()=>{isManuallyConnecting=!0,$("#peer-id").val(t),$("#chat-username").val(n),$("#joinPeer").click()},300)})}}else"denied"!==Notification.permission&&Notification.requestPermission().then(e=>{"granted"===e&&"visible"!==document.visibilityState&&new Notification("Wavelite",{body:`Peer "${t}" is requesting to connect.`,icon:"/logo.png"})});if(e=!0,"visible"===document.visibilityState){$("#autoJoinMessage").text(`Peer "${t}" is requesting to connect. Do you want to join?`);let a=new bootstrap.Modal(document.getElementById("autoJoinModal"));a.show(),$("#autoJoinConfirmBtn").off("click").on("click",()=>{a.hide(),setTimeout(()=>{isManuallyConnecting=!0,$("#peer-id").val(t),$("#chat-username").val(n),$("#joinPeer").click()},300)})}return}},3e3)});