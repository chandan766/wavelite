const corsHeaders={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type","Content-Type":"application/json"};function getSignalingKey(e,r){return`${e}_${r}`}function createErrorResponse(e,r=400,s=null){const t={error:e};return s&&(t.details=s),new Response(JSON.stringify(t),{status:r,headers:corsHeaders})}function createSuccessResponse(e,r=200){return new Response(JSON.stringify(e),{status:r,headers:corsHeaders})}export async function onRequest(e){try{const{request:r,env:s}=e,t=(new URL(r.url),r.method);return"OPTIONS"===t?new Response(null,{status:200,headers:corsHeaders}):s.SIGNALING_KV?"POST"===t?await handlePostRequest(r,s):"GET"===t?await handleGetRequest(r,s):createErrorResponse("Method not allowed",405,{method:t,allowed:["GET","POST","OPTIONS"]}):(console.error("‚ùå KV storage not configured - env.SIGNALING_KV is undefined"),createErrorResponse("KV storage not configured",500))}catch(e){return console.error("üí• SIGNALING FUNCTION ERROR:",e.message),console.error("üìä Full error object:",e),console.error("üìà Error stack:",e.stack),createErrorResponse("Internal server error",500,e.message)}}async function handlePostRequest(e,r){let s;try{s=await e.json()}catch(e){return console.error("‚ùå Error parsing JSON:",e.message),createErrorResponse("Invalid JSON in request body",400)}const{type:t,peerId:a,data:n}=s;if(!t)return createErrorResponse("Missing required field: type");if(!a)return createErrorResponse("Missing required field: peerId");switch(t){case"offer":return n?await handleStoreOffer(a,n,r):createErrorResponse("Missing required field: data for type offer");case"answer":return n?await handleStoreAnswer(a,n,r):createErrorResponse("Missing required field: data for type answer");case"cleanup":const{cleanupType:e}=s;return await handleCleanup(a,r,e);default:return createErrorResponse(`Invalid type: ${t}. Valid types are: offer, answer, cleanup`)}}async function handleGetRequest(e,r){try{const s=new URL(e.url),t=s.searchParams.get("type"),a=s.searchParams.get("peerId");return t?a?await handlePollSignaling(t,a,r):createErrorResponse("Missing required query parameter: peerId"):createErrorResponse("Missing required query parameter: type")}catch(e){return console.error("üí• Error in handleGetRequest:",e.message),console.error("üìä Full error:",e),createSuccessResponse({found:!1,message:"Error occurred while processing request",error:e.message,timestamp:Date.now()})}}async function handleStoreOffer(e,r,s){try{const t=getSignalingKey("offer",e),a={type:"offer",peerId:e,data:r,timestamp:Date.now()};return await s.SIGNALING_KV.put(t,JSON.stringify(a),{expirationTtl:300}),createSuccessResponse({success:!0,message:`Offer stored successfully for peerId: ${e}`,type:"offer",peerId:e,timestamp:a.timestamp})}catch(e){return console.error("‚ùå Error storing offer:",e.message),createErrorResponse("Failed to store offer",500,e.message)}}async function handleStoreAnswer(e,r,s){try{const t=getSignalingKey("answer",e),a={type:"answer",peerId:e,data:r,timestamp:Date.now()};return await s.SIGNALING_KV.put(t,JSON.stringify(a),{expirationTtl:300}),createSuccessResponse({success:!0,message:`Answer stored successfully for peerId: ${e}`,type:"answer",peerId:e,timestamp:a.timestamp})}catch(e){return console.error("‚ùå Error storing answer:",e.message),createErrorResponse("Failed to store answer",500,e.message)}}async function handlePollSignaling(e,r,s){try{if(!e||!r)return createSuccessResponse({found:!1,message:"Invalid request parameters",timestamp:Date.now()});if(!s||!s.SIGNALING_KV)return createSuccessResponse({found:!1,message:`No ${e} found for peerId: ${r} (KV storage unavailable)`,timestamp:Date.now()});const t=getSignalingKey(e,r);let a,n;try{a=await s.SIGNALING_KV.get(t)}catch(s){return createSuccessResponse({found:!1,message:`No ${e} found for peerId: ${r} (KV access error)`,timestamp:Date.now()})}if(!a){return createSuccessResponse({found:!1,message:`No ${e} found for peerId: ${r}`,timestamp:Date.now()})}try{n=JSON.parse(a)}catch(a){try{await s.SIGNALING_KV.delete(t)}catch(e){}return createSuccessResponse({found:!1,message:`No ${e} found for peerId: ${r} (data corruption detected and cleaned)`,timestamp:Date.now()})}if(!(n&&"object"==typeof n&&n.type&&n.peerId&&n.data)){try{await s.SIGNALING_KV.delete(t)}catch(e){}return createSuccessResponse({found:!1,message:`No ${e} found for peerId: ${r} (invalid data detected and cleaned)`,timestamp:Date.now()})}if("candidate"===e)try{await s.SIGNALING_KV.delete(t)}catch(e){}return createSuccessResponse({found:!0,type:n.type,peerId:n.peerId,data:n.data,timestamp:n.timestamp||Date.now()})}catch(s){return createSuccessResponse({found:!1,message:`No ${e} found for peerId: ${r} (unexpected error)`,timestamp:Date.now()})}}async function handleCleanup(e,r,s=null){try{let t=0;if(!e){const e=await r.SIGNALING_KV.list();for(const s of e.keys)await r.SIGNALING_KV.delete(s.name),t++;return createSuccessResponse({success:!0,message:`Cleaned up ${t} signaling entries globally`,type:"cleanup",peerId:null,deletedCount:t,timestamp:Date.now()})}const a=s?[s]:["offer","answer"];for(const s of a){const a=getSignalingKey(s,e);await r.SIGNALING_KV.get(a)&&(await r.SIGNALING_KV.delete(a),t++)}return createSuccessResponse({success:!0,message:`Cleaned up ${t} signaling entries for peerId: ${e}`,type:"cleanup",peerId:e,deletedCount:t,timestamp:Date.now()})}catch(e){return console.error("‚ùå Error during cleanup:",e.message),createErrorResponse("Failed to cleanup signaling data",500,e.message)}}